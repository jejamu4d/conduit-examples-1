// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/Emoji.proto

/*
Package emojivoto_v1 is a generated protocol buffer package.

It is generated from these files:
	proto/Emoji.proto
	proto/Voting.proto

It has these top-level messages:
	Emoji
	ListAllEmojiRequest
	ListAllEmojiResponse
	FindByShortcodeRequest
	FindByShortcodeResponse
	VotingResult
	VoteRequest
	VoteResponse
	ResultsRequest
	ResultsResponse
*/
package emojivoto_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Emoji struct {
	Unicode   string `protobuf:"bytes,1,opt,name=unicode" json:"unicode,omitempty"`
	Shortcode string `protobuf:"bytes,2,opt,name=shortcode" json:"shortcode,omitempty"`
}

func (m *Emoji) Reset()                    { *m = Emoji{} }
func (m *Emoji) String() string            { return proto.CompactTextString(m) }
func (*Emoji) ProtoMessage()               {}
func (*Emoji) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Emoji) GetUnicode() string {
	if m != nil {
		return m.Unicode
	}
	return ""
}

func (m *Emoji) GetShortcode() string {
	if m != nil {
		return m.Shortcode
	}
	return ""
}

type ListAllEmojiRequest struct {
}

func (m *ListAllEmojiRequest) Reset()                    { *m = ListAllEmojiRequest{} }
func (m *ListAllEmojiRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAllEmojiRequest) ProtoMessage()               {}
func (*ListAllEmojiRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ListAllEmojiResponse struct {
	List []*Emoji `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ListAllEmojiResponse) Reset()                    { *m = ListAllEmojiResponse{} }
func (m *ListAllEmojiResponse) String() string            { return proto.CompactTextString(m) }
func (*ListAllEmojiResponse) ProtoMessage()               {}
func (*ListAllEmojiResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListAllEmojiResponse) GetList() []*Emoji {
	if m != nil {
		return m.List
	}
	return nil
}

type FindByShortcodeRequest struct {
	Shortcode string `protobuf:"bytes,1,opt,name=Shortcode,json=shortcode" json:"Shortcode,omitempty"`
}

func (m *FindByShortcodeRequest) Reset()                    { *m = FindByShortcodeRequest{} }
func (m *FindByShortcodeRequest) String() string            { return proto.CompactTextString(m) }
func (*FindByShortcodeRequest) ProtoMessage()               {}
func (*FindByShortcodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FindByShortcodeRequest) GetShortcode() string {
	if m != nil {
		return m.Shortcode
	}
	return ""
}

type FindByShortcodeResponse struct {
	Emoji *Emoji `protobuf:"bytes,1,opt,name=Emoji,json=emoji" json:"Emoji,omitempty"`
}

func (m *FindByShortcodeResponse) Reset()                    { *m = FindByShortcodeResponse{} }
func (m *FindByShortcodeResponse) String() string            { return proto.CompactTextString(m) }
func (*FindByShortcodeResponse) ProtoMessage()               {}
func (*FindByShortcodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FindByShortcodeResponse) GetEmoji() *Emoji {
	if m != nil {
		return m.Emoji
	}
	return nil
}

func init() {
	proto.RegisterType((*Emoji)(nil), "emojivoto.v1.Emoji")
	proto.RegisterType((*ListAllEmojiRequest)(nil), "emojivoto.v1.ListAllEmojiRequest")
	proto.RegisterType((*ListAllEmojiResponse)(nil), "emojivoto.v1.ListAllEmojiResponse")
	proto.RegisterType((*FindByShortcodeRequest)(nil), "emojivoto.v1.FindByShortcodeRequest")
	proto.RegisterType((*FindByShortcodeResponse)(nil), "emojivoto.v1.FindByShortcodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EmojiService service

type EmojiServiceClient interface {
	ListAll(ctx context.Context, in *ListAllEmojiRequest, opts ...grpc.CallOption) (*ListAllEmojiResponse, error)
	FindByShortcode(ctx context.Context, in *FindByShortcodeRequest, opts ...grpc.CallOption) (*FindByShortcodeResponse, error)
}

type emojiServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmojiServiceClient(cc *grpc.ClientConn) EmojiServiceClient {
	return &emojiServiceClient{cc}
}

func (c *emojiServiceClient) ListAll(ctx context.Context, in *ListAllEmojiRequest, opts ...grpc.CallOption) (*ListAllEmojiResponse, error) {
	out := new(ListAllEmojiResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.EmojiService/ListAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emojiServiceClient) FindByShortcode(ctx context.Context, in *FindByShortcodeRequest, opts ...grpc.CallOption) (*FindByShortcodeResponse, error) {
	out := new(FindByShortcodeResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.EmojiService/FindByShortcode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmojiService service

type EmojiServiceServer interface {
	ListAll(context.Context, *ListAllEmojiRequest) (*ListAllEmojiResponse, error)
	FindByShortcode(context.Context, *FindByShortcodeRequest) (*FindByShortcodeResponse, error)
}

func RegisterEmojiServiceServer(s *grpc.Server, srv EmojiServiceServer) {
	s.RegisterService(&_EmojiService_serviceDesc, srv)
}

func _EmojiService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmojiServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.EmojiService/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmojiServiceServer).ListAll(ctx, req.(*ListAllEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmojiService_FindByShortcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByShortcodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmojiServiceServer).FindByShortcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.EmojiService/FindByShortcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmojiServiceServer).FindByShortcode(ctx, req.(*FindByShortcodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmojiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emojivoto.v1.EmojiService",
	HandlerType: (*EmojiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAll",
			Handler:    _EmojiService_ListAll_Handler,
		},
		{
			MethodName: "FindByShortcode",
			Handler:    _EmojiService_FindByShortcode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Emoji.proto",
}

func init() { proto.RegisterFile("proto/Emoji.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x77, 0xcd, 0xcd, 0xcf, 0xca, 0xd4, 0x03, 0xb3, 0x85, 0x78, 0x52, 0x41, 0x9c, 0xb2,
	0xfc, 0x92, 0x7c, 0xbd, 0x32, 0x43, 0x25, 0x7b, 0x2e, 0x56, 0xb0, 0xa4, 0x90, 0x04, 0x17, 0x7b,
	0x69, 0x5e, 0x66, 0x72, 0x7e, 0x4a, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x8c, 0x2b,
	0x24, 0xc3, 0xc5, 0x59, 0x9c, 0x91, 0x5f, 0x54, 0x02, 0x96, 0x63, 0x02, 0xcb, 0x21, 0x04, 0x94,
	0x44, 0xb9, 0x84, 0x7d, 0x32, 0x8b, 0x4b, 0x1c, 0x73, 0x72, 0xc0, 0xe6, 0x04, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x28, 0xd9, 0x73, 0x89, 0xa0, 0x0a, 0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a,
	0xa9, 0x73, 0xb1, 0xe4, 0x64, 0x16, 0x97, 0x48, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b, 0x09, 0xeb,
	0x21, 0x3b, 0x46, 0x0f, 0xa2, 0x14, 0xac, 0x40, 0xc9, 0x8c, 0x4b, 0xcc, 0x2d, 0x33, 0x2f, 0xc5,
	0xa9, 0x32, 0x18, 0x66, 0x15, 0xd4, 0x68, 0x90, 0x7b, 0xe0, 0x62, 0x50, 0xb7, 0x22, 0xb9, 0xc7,
	0x85, 0x4b, 0x1c, 0x43, 0x1f, 0xd4, 0x6e, 0x4d, 0xa8, 0x5f, 0xc1, 0x9a, 0x70, 0x58, 0xce, 0x0a,
	0x16, 0x33, 0x3a, 0xc0, 0xc8, 0xc5, 0x03, 0x16, 0x08, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15,
	0x0a, 0xe0, 0x62, 0x87, 0xfa, 0x47, 0x48, 0x11, 0x55, 0x1f, 0x16, 0xdf, 0x4b, 0x29, 0xe1, 0x53,
	0x02, 0x75, 0x4d, 0x1c, 0x17, 0x3f, 0x9a, 0x43, 0x85, 0x54, 0x50, 0xb5, 0x61, 0xf7, 0xbf, 0x94,
	0x2a, 0x01, 0x55, 0x10, 0xf3, 0x93, 0xd8, 0xc0, 0xd1, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xfe, 0x1a, 0xc4, 0x23, 0x03, 0x02, 0x00, 0x00,
}
