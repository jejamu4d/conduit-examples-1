// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/Voting.proto

package emojivoto_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VotingResult struct {
	Shortcode string `protobuf:"bytes,1,opt,name=Shortcode,json=shortcode" json:"Shortcode,omitempty"`
	Votes     int32  `protobuf:"varint,2,opt,name=Votes,json=votes" json:"Votes,omitempty"`
}

func (m *VotingResult) Reset()                    { *m = VotingResult{} }
func (m *VotingResult) String() string            { return proto.CompactTextString(m) }
func (*VotingResult) ProtoMessage()               {}
func (*VotingResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *VotingResult) GetShortcode() string {
	if m != nil {
		return m.Shortcode
	}
	return ""
}

func (m *VotingResult) GetVotes() int32 {
	if m != nil {
		return m.Votes
	}
	return 0
}

type VoteRequest struct {
	Shortcode string `protobuf:"bytes,1,opt,name=Shortcode,json=shortcode" json:"Shortcode,omitempty"`
}

func (m *VoteRequest) Reset()                    { *m = VoteRequest{} }
func (m *VoteRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()               {}
func (*VoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *VoteRequest) GetShortcode() string {
	if m != nil {
		return m.Shortcode
	}
	return ""
}

type VoteResponse struct {
}

func (m *VoteResponse) Reset()                    { *m = VoteResponse{} }
func (m *VoteResponse) String() string            { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()               {}
func (*VoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type ResultsRequest struct {
}

func (m *ResultsRequest) Reset()                    { *m = ResultsRequest{} }
func (m *ResultsRequest) String() string            { return proto.CompactTextString(m) }
func (*ResultsRequest) ProtoMessage()               {}
func (*ResultsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type ResultsResponse struct {
	Results []*VotingResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ResultsResponse) Reset()                    { *m = ResultsResponse{} }
func (m *ResultsResponse) String() string            { return proto.CompactTextString(m) }
func (*ResultsResponse) ProtoMessage()               {}
func (*ResultsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ResultsResponse) GetResults() []*VotingResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*VotingResult)(nil), "emojivoto.v1.VotingResult")
	proto.RegisterType((*VoteRequest)(nil), "emojivoto.v1.VoteRequest")
	proto.RegisterType((*VoteResponse)(nil), "emojivoto.v1.VoteResponse")
	proto.RegisterType((*ResultsRequest)(nil), "emojivoto.v1.ResultsRequest")
	proto.RegisterType((*ResultsResponse)(nil), "emojivoto.v1.ResultsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VotingService service

type VotingServiceClient interface {
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
}

type votingServiceClient struct {
	cc *grpc.ClientConn
}

func NewVotingServiceClient(cc *grpc.ClientConn) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/Vote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := grpc.Invoke(ctx, "/emojivoto.v1.VotingService/Results", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VotingService service

type VotingServiceServer interface {
	Vote(context.Context, *VoteRequest) (*VoteResponse, error)
	Results(context.Context, *ResultsRequest) (*ResultsResponse, error)
}

func RegisterVotingServiceServer(s *grpc.Server, srv VotingServiceServer) {
	s.RegisterService(&_VotingService_serviceDesc, srv)
}

func _VotingService_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_Results_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).Results(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/Results",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).Results(ctx, req.(*ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VotingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emojivoto.v1.VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _VotingService_Vote_Handler,
		},
		{
			MethodName: "Results",
			Handler:    _VotingService_Results_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Voting.proto",
}

func init() { proto.RegisterFile("proto/Voting.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x25, 0x6a, 0x5d, 0x3a, 0xbb, 0xae, 0x32, 0x78, 0xa8, 0x61, 0x85, 0x92, 0x53, 0x41, 0x88,
	0xb8, 0x7a, 0xf5, 0xe2, 0x41, 0xef, 0x59, 0xd8, 0x0f, 0x70, 0x1d, 0xb4, 0xa2, 0x9d, 0x9a, 0xa4,
	0xf9, 0x14, 0xbf, 0x57, 0xda, 0xb4, 0xd2, 0xa2, 0xe2, 0x71, 0xde, 0x7b, 0x33, 0xef, 0x3d, 0x06,
	0xb0, 0xb6, 0xec, 0xf9, 0x72, 0xcb, 0xbe, 0xac, 0x9e, 0x75, 0x37, 0xe0, 0x82, 0xde, 0xf9, 0xb5,
	0x0c, 0xec, 0x59, 0x87, 0x2b, 0x75, 0x07, 0x8b, 0xc8, 0x1a, 0x72, 0xcd, 0x9b, 0xc7, 0x15, 0xa4,
	0x9b, 0x17, 0xb6, 0x7e, 0xc7, 0x4f, 0x94, 0x89, 0x5c, 0x14, 0xa9, 0x49, 0xdd, 0x00, 0xe0, 0x29,
	0x24, 0x5b, 0xf6, 0xe4, 0xb2, 0xbd, 0x5c, 0x14, 0x89, 0x49, 0x42, 0x3b, 0xa8, 0x0b, 0x98, 0xb7,
	0xa8, 0xa1, 0x8f, 0x86, 0xdc, 0x3f, 0x27, 0xd4, 0xb2, 0x33, 0x24, 0x43, 0xae, 0xe6, 0xca, 0x91,
	0x3a, 0x81, 0x65, 0xb4, 0x76, 0xfd, 0xbe, 0x7a, 0x80, 0xe3, 0x6f, 0x24, 0x8a, 0xf0, 0x06, 0x66,
	0x36, 0x42, 0x99, 0xc8, 0xf7, 0x8b, 0xf9, 0x5a, 0xea, 0x71, 0x0b, 0x3d, 0xae, 0x60, 0x06, 0xe9,
	0xfa, 0x53, 0xc0, 0x51, 0x64, 0x36, 0x64, 0x43, 0xb9, 0x23, 0xbc, 0x85, 0x83, 0xd6, 0x1c, 0xcf,
	0x7e, 0xac, 0x0f, 0xe9, 0xa5, 0xfc, 0x8d, 0xea, 0x63, 0xdc, 0xc3, 0xac, 0x4f, 0x86, 0xab, 0xa9,
	0x6c, 0x5a, 0x41, 0x9e, 0xff, 0xc1, 0xc6, 0x3b, 0x8f, 0x87, 0xdd, 0x27, 0xae, 0xbf, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x88, 0x74, 0x77, 0xf1, 0x9f, 0x01, 0x00, 0x00,
}
